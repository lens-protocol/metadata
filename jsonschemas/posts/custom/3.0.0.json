{
  "type": "object",
  "properties": {
    "description": {
      "anyOf": [
        {
          "$ref": "#/$defs/NonEmptyString",
          "description": "A human-readable description of the item. It could be plain text or markdown."
        },
        {
          "type": "null"
        }
      ],
      "description": "A human-readable description of the item. It could be plain text or markdown."
    },
    "external_url": {
      "anyOf": [
        {
          "$ref": "#/$defs/URI",
          "description": "This is the URL that will appear below the asset's image on OpenSea and others etc. and will allow users to leave OpenSea and view the item on the site."
        },
        {
          "type": "null"
        }
      ],
      "description": "This is the URL that will appear below the asset's image on OpenSea and others etc. and will allow users to leave OpenSea and view the item on the site."
    },
    "name": {
      "type": "string",
      "description": "Name of the NFT item."
    },
    "attributes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/MarketplaceMetadataAttribute"
      },
      "description": "These are the attributes for the item, which will show up on the OpenSea and others NFT trading websites on the item."
    },
    "image": {
      "anyOf": [
        {
          "$ref": "#/$defs/URI",
          "description": "NFT will store any image here."
        },
        {
          "type": "null"
        }
      ],
      "description": "NFT will store any image here."
    },
    "animation_url": {
      "anyOf": [
        {
          "$ref": "#/$defs/URI",
          "description": "A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported."
        },
        {
          "type": "null"
        }
      ],
      "description": "A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported."
    },
    "signature": {
      "type": "string",
      "minLength": 1,
      "description": "A cryptographic signature of the Lens metadata."
    },
    "$schema": {
      "type": "string",
      "const": "https://json-schemas.lens.dev/posts/custom/3.0.0.json"
    },
    "lens": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "maxItems": 20,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard. Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged."
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(?:-[a-zA-Z]{2})?$",
          "description": "A Locale Identifier in the `[language]` OR `[language]-[region]` format (e.g. `en`, `en-GB`, `it`). [language] MUST be in the ISO 639-1 format. [region], if provided, MUST be in the ISO 3166-1 alpha-2 format."
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Tag"
          },
          "maxItems": 20,
          "description": "An arbitrary list of tags."
        },
        "contentWarning": {
          "type": "string",
          "enum": [
            "NSFW",
            "SENSITIVE",
            "SPOILER"
          ],
          "description": "Specify a content warning."
        },
        "mainContentFocus": {
          "type": "string",
          "const": "CUSTOM",
          "description": "The main focus of the post."
        },
        "name": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "A human-readable name for the custom post type."
        },
        "value": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "A JSON string containing any custom data."
        }
      },
      "required": [
        "id",
        "locale",
        "mainContentFocus",
        "name",
        "value"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "$schema",
    "lens"
  ],
  "additionalProperties": true,
  "$defs": {
    "NonEmptyString": {
      "type": "string",
      "minLength": 1
    },
    "Markdown": {
      "$ref": "#/$defs/NonEmptyString"
    },
    "URI": {
      "type": "string",
      "minLength": 6,
      "format": "uri",
      "description": "A Uniform Resource Identifier."
    },
    "AnyMedia": {
      "anyOf": [
        {
          "$ref": "#/$defs/MediaAudio"
        },
        {
          "$ref": "#/$defs/MediaImage"
        },
        {
          "$ref": "#/$defs/MediaVideo"
        }
      ]
    },
    "ChainId": {
      "type": "number",
      "exclusiveMinimum": 0
    },
    "EvmAddress": {
      "type": "string",
      "minLength": 42,
      "maxLength": 42,
      "description": "An EVM compatible address."
    },
    "GeoURI": {
      "type": "string",
      "pattern": "^geo:(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$",
      "description": "A Geographic coordinate as subset of Geo URI (RFC 5870). Currently only supports the `geo:lat,lng` format."
    },
    "MarketplaceMetadataAttribute": {
      "type": "object",
      "properties": {
        "display_type": {
          "type": "string",
          "enum": [
            "number",
            "string",
            "date"
          ]
        },
        "trait_type": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The name of the trait."
        },
        "value": {
          "type": [
            "string",
            "number"
          ]
        }
      },
      "additionalProperties": true
    },
    "MediaAudio": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/URI"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "audio/wav",
            "audio/vnd.wave",
            "audio/mpeg",
            "audio/ogg",
            "audio/mp4",
            "audio/aac",
            "audio/webm",
            "audio/flac"
          ],
          "description": "The mime type of the audio file."
        },
        "cover": {
          "$ref": "#/$defs/URI",
          "description": "A Uniform Resource Identifier."
        },
        "duration": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "How long the the audio is in seconds."
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the audio."
        },
        "credits": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The credits for the audio."
        },
        "artist": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The name of the artist."
        },
        "genre": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The genre of the audio"
        },
        "recordLabel": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The record label for the audio."
        },
        "kind": {
          "type": "string",
          "enum": [
            "MUSIC",
            "PODCAST",
            "AUDIOBOOK",
            "VOICE_NOTE",
            "SOUND",
            "OTHER"
          ],
          "description": "The type of audio."
        },
        "lyrics": {
          "$ref": "#/$defs/URI",
          "description": "A Uniform Resource Identifier."
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MediaImage": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/URI"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "image/avif",
            "image/bmp",
            "image/gif",
            "image/heic",
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-ms-bmp"
          ],
          "description": "The mime type of the image"
        },
        "altTag": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The alt tag for accessibility"
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the image"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MediaVideo": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/URI"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "model/gltf+json",
            "model/gltf-binary",
            "video/x-m4v",
            "video/mov",
            "video/mp4",
            "video/mpeg",
            "video/ogg",
            "video/ogv",
            "video/quicktime",
            "video/webm"
          ],
          "description": "The mime type of the video"
        },
        "altTag": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The alt tag for accessibility"
        },
        "cover": {
          "$ref": "#/$defs/URI",
          "description": "A Uniform Resource Identifier."
        },
        "duration": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "How long the the video is in seconds"
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the video"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MetadataAttribute": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Boolean"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "description": "A JS boolean value serialized as string. It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Date"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO 8601 date string.  It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Number"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "A valid JS number serialized as string. It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "String"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "Any string value."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "JSON"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "A JSON string. It's consumer responsibility to validate and parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        }
      ]
    },
    "MetadataLicenseType": {
      "type": "string",
      "enum": [
        "CCO",
        "CC BY",
        "CC BY-ND",
        "CC BY-NC",
        "TBNL-C-D-PL-Legal",
        "TBNL-C-DT-PL-Legal",
        "TBNL-C-ND-PL-Legal",
        "TBNL-C-D-NPL-Legal",
        "TBNL-C-DT-NPL-Legal",
        "TBNL-C-DTSA-PL-Legal",
        "TBNL-C-DTSA-NPL-Legal",
        "TBNL-C-ND-NPL-Legal",
        "TBNL-C-D-PL-Ledger",
        "TBNL-C-DT-PL-Ledger",
        "TBNL-C-ND-PL-Ledger",
        "TBNL-C-D-NPL-Ledger",
        "TBNL-C-DT-NPL-Ledger",
        "TBNL-C-DTSA-PL-Ledger",
        "TBNL-C-DTSA-NPL-Ledger",
        "TBNL-C-ND-NPL-Ledger",
        "TBNL-NC-D-PL-Legal",
        "TBNL-NC-DT-PL-Legal",
        "TBNL-NC-ND-PL-Legal",
        "TBNL-NC-D-NPL-Legal",
        "TBNL-NC-DT-NPL-Legal",
        "TBNL-NC-DTSA-PL-Legal",
        "TBNL-NC-DTSA-NPL-Legal",
        "TBNL-NC-ND-NPL-Legal",
        "TBNL-NC-D-PL-Ledger",
        "TBNL-NC-DT-PL-Ledger",
        "TBNL-NC-ND-PL-Ledger",
        "TBNL-NC-D-NPL-Ledger",
        "TBNL-NC-DT-NPL-Ledger",
        "TBNL-NC-DTSA-PL-Ledger",
        "TBNL-NC-DTSA-NPL-Ledger",
        "TBNL-NC-ND-NPL-Ledger"
      ]
    },
    "PhysicalAddress": {
      "type": "object",
      "properties": {
        "formatted": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The full mailing address formatted for display."
        },
        "streetAddress": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The street address including house number, street name, P.O. Box, apartment or unit number and extended multi-line address information."
        },
        "locality": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The city or locality."
        },
        "region": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The state or region."
        },
        "postalCode": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The zip or postal code."
        },
        "country": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The country name component."
        }
      },
      "required": [
        "locality",
        "country"
      ],
      "additionalProperties": false
    },
    "Tag": {
      "type": "string",
      "minLength": 1,
      "maxLength": 50,
      "description": "An arbitrary tag."
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}
