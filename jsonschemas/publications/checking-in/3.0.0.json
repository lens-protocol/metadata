{
  "type": "object",
  "properties": {
    "description": {
      "anyOf": [
        {
          "$ref": "#/$defs/NonEmptyString",
          "description": "A human-readable description of the item. It could be plain text or markdown."
        },
        {
          "type": "null"
        }
      ],
      "description": "A human-readable description of the item. It could be plain text or markdown."
    },
    "external_url": {
      "anyOf": [
        {
          "$ref": "#/$defs/Uri",
          "description": "This is the URL that will appear below the asset's image on OpenSea and others etc. and will allow users to leave OpenSea and view the item on the site."
        },
        {
          "type": "null"
        }
      ],
      "description": "This is the URL that will appear below the asset's image on OpenSea and others etc. and will allow users to leave OpenSea and view the item on the site."
    },
    "name": {
      "type": "string",
      "description": "Name of the NFT item."
    },
    "attributes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/MarketplaceMetadataAttribute"
      },
      "description": "These are the attributes for the item, which will show up on the OpenSea and others NFT trading websites on the item."
    },
    "image": {
      "anyOf": [
        {
          "$ref": "#/$defs/Uri",
          "description": "Marketplaces will store any NFT image here."
        },
        {
          "type": "null"
        }
      ],
      "description": "Marketplaces will store any NFT image here."
    },
    "animation_url": {
      "anyOf": [
        {
          "$ref": "#/$defs/Uri",
          "description": "A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported."
        },
        {
          "type": "null"
        }
      ],
      "description": "A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported."
    },
    "signature": {
      "type": "string",
      "minLength": 1,
      "description": "A cryptographic signature of the Lens metadata."
    },
    "$schema": {
      "type": "string",
      "const": "https://json-schemas.lens.dev/publications/checking-in/3.0.0.json"
    },
    "lens": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure."
        },
        "appId": {
          "type": "string",
          "minLength": 1,
          "maxLength": 200,
          "description": "The App Id that this publication belongs to."
        },
        "hideFromFeed": {
          "type": "boolean",
          "description": "Determine if the publication should not be shown in any feed."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "maxItems": 20,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard. Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged."
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(?:-[a-zA-Z]{2})?$",
          "description": "A Locale Identifier in the `[language]` OR `[language]-[region]` format (e.g. `en`, `en-GB`, `it`). [language] MUST be in the ISO 639-1 format. [region], if provided, MUST be in the ISO 3166-1 alpha-2 format."
        },
        "encryptedWith": {
          "$ref": "#/$defs/PublicationEncryptionStrategy"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Tag"
          },
          "maxItems": 20,
          "description": "An arbitrary list of tags."
        },
        "contentWarning": {
          "type": "string",
          "enum": [
            "NSFW",
            "SENSITIVE",
            "SPOILER"
          ],
          "description": "Specify a content warning."
        },
        "mainContentFocus": {
          "type": "string",
          "const": "CHECKING_IN",
          "description": "The main focus of the publication."
        },
        "location": {
          "$ref": "#/$defs/EncryptableString",
          "description": "Where you checking in from (free form text)."
        },
        "position": {
          "anyOf": [
            {
              "$ref": "#/$defs/GeoURI"
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ],
          "description": "The optional geographic position of the location."
        },
        "address": {
          "$ref": "#/$defs/PhysicalAddress",
          "description": "The optional address of the location."
        },
        "content": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The content for the publication as markdown."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ],
          "description": "Optional markdown content."
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyMedia"
          },
          "minItems": 1,
          "description": "The other attachments you want to include with it."
        }
      },
      "required": [
        "id",
        "locale",
        "mainContentFocus",
        "location"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "$schema",
    "lens"
  ],
  "additionalProperties": true,
  "$defs": {
    "NonEmptyString": {
      "type": "string",
      "minLength": 1
    },
    "Markdown": {
      "$ref": "#/$defs/NonEmptyString"
    },
    "Uri": {
      "type": "string",
      "minLength": 6,
      "format": "uri",
      "description": "A Uniform Resource Identifier. "
    },
    "AccessCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "OR"
        },
        "criteria": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "AND"
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/$defs/NftOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/Erc20OwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/EoaOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/ProfileOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/FollowCondition"
                        },
                        {
                          "$ref": "#/$defs/CollectCondition"
                        },
                        {
                          "$ref": "#/$defs/AdvancedContractCondition"
                        }
                      ]
                    },
                    "maxItems": 5
                  }
                },
                "required": [
                  "type",
                  "criteria"
                ],
                "additionalProperties": false
              },
              {
                "$ref": "#/$defs/CollectCondition"
              },
              {
                "$ref": "#/$defs/AdvancedContractCondition"
              },
              {
                "$ref": "#/$defs/EoaOwnershipCondition"
              },
              {
                "$ref": "#/$defs/Erc20OwnershipCondition"
              },
              {
                "$ref": "#/$defs/FollowCondition"
              },
              {
                "$ref": "#/$defs/NftOwnershipCondition"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "OR"
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/$defs/NftOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/Erc20OwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/EoaOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/ProfileOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/FollowCondition"
                        },
                        {
                          "$ref": "#/$defs/CollectCondition"
                        },
                        {
                          "$ref": "#/$defs/AdvancedContractCondition"
                        }
                      ]
                    },
                    "maxItems": 5
                  }
                },
                "required": [
                  "type",
                  "criteria"
                ],
                "additionalProperties": false
              },
              {
                "$ref": "#/$defs/ProfileOwnershipCondition"
              }
            ]
          },
          "maxItems": 5
        }
      },
      "required": [
        "type",
        "criteria"
      ],
      "additionalProperties": false
    },
    "AdvancedContractCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ADVANCED_CONTRACT"
        },
        "contract": {
          "type": "object",
          "properties": {
            "chainId": {
              "$ref": "#/$defs/ChainId"
            },
            "address": {
              "$ref": "#/$defs/EvmAddress"
            }
          },
          "required": [
            "chainId",
            "address"
          ],
          "additionalProperties": false,
          "description": "The contract address and chain id"
        },
        "functionName": {
          "type": "string",
          "minLength": 1,
          "description": "The name of the function you want to call"
        },
        "abi": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The contract ABI. Has to be in human readable single string format containing the signature of the function you want to call. See https://docs.ethers.org/v5/api/utils/abi/formats/#abi-formats--human-readable-abi for more info"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The parameters to pass to the function. Must be exactly matching the function arguments. You *must* pass in the `:userAddress` parameter to represent the decrypter address. Any array or tuple arguments, must be stringified JSON arrays."
        },
        "comparison": {
          "type": "string",
          "enum": [
            "EQUAL",
            "NOT_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL"
          ],
          "description": "The comparison operator to use. In case of boolean functions you can only use EQUAL or NOT_EQUAL"
        },
        "value": {
          "type": "string",
          "pattern": "^(true|false|\\d{1,70})$",
          "description": "The comparison value. Accepts 'true', 'false' or a number"
        }
      },
      "required": [
        "type",
        "contract",
        "functionName",
        "abi",
        "params",
        "comparison",
        "value"
      ],
      "additionalProperties": false
    },
    "Amount": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "object",
          "properties": {
            "contract": {
              "$ref": "#/$defs/NetworkAddress"
            },
            "decimals": {
              "type": "integer",
              "minimum": 0,
              "description": "The number of decimals of the asset."
            }
          },
          "required": [
            "contract",
            "decimals"
          ],
          "additionalProperties": false
        },
        "value": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The amount in the smallest unit of the given asset (e.g. wei for ETH)."
        }
      },
      "required": [
        "asset",
        "value"
      ],
      "additionalProperties": false,
      "description": "An amount of a specific asset."
    },
    "AnyMedia": {
      "anyOf": [
        {
          "$ref": "#/$defs/MediaAudio"
        },
        {
          "$ref": "#/$defs/MediaImage"
        },
        {
          "$ref": "#/$defs/MediaVideo"
        }
      ]
    },
    "ChainId": {
      "type": "number",
      "exclusiveMinimum": 0
    },
    "CollectCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "COLLECT"
        },
        "publicationId": {
          "$ref": "#/$defs/PublicationId"
        },
        "thisPublication": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "type",
        "publicationId"
      ],
      "additionalProperties": false
    },
    "EncryptableUri": {
      "anyOf": [
        {
          "type": "string",
          "minLength": 6,
          "format": "uri",
          "description": "A Uniform Resource Identifier. "
        },
        {
          "$ref": "#/$defs/EncryptedString"
        }
      ],
      "description": "An encrypted value or its decrypted version."
    },
    "EncryptedString": {
      "type": "string",
      "pattern": "^\\S+$",
      "description": "An encrypted value."
    },
    "EncryptableString": {
      "anyOf": [
        {
          "type": "string",
          "minLength": 1
        },
        {
          "$ref": "#/$defs/EncryptedString"
        }
      ],
      "description": "An encrypted value or its decrypted version."
    },
    "EoaOwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "EOA_OWNERSHIP"
        },
        "address": {
          "$ref": "#/$defs/EvmAddress"
        }
      },
      "required": [
        "type",
        "address"
      ],
      "additionalProperties": false
    },
    "Erc20OwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ERC20_OWNERSHIP"
        },
        "amount": {
          "$ref": "#/$defs/Amount"
        },
        "condition": {
          "type": "string",
          "enum": [
            "EQUAL",
            "NOT_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL"
          ]
        }
      },
      "required": [
        "type",
        "amount",
        "condition"
      ],
      "additionalProperties": false
    },
    "EvmAddress": {
      "type": "string",
      "minLength": 42,
      "maxLength": 42,
      "description": "An EVM compatible address."
    },
    "FollowCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "FOLLOW"
        },
        "follow": {
          "$ref": "#/$defs/ProfileId"
        }
      },
      "required": [
        "type",
        "follow"
      ],
      "additionalProperties": false
    },
    "GeoURI": {
      "type": "string",
      "pattern": "^geo:(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$",
      "description": "A Geographic coordinate as subset of Geo URI (RFC 5870). Currently only supports the `geo:lat,lng` format."
    },
    "MarketplaceMetadataAttribute": {
      "type": "object",
      "properties": {
        "display_type": {
          "type": "string",
          "enum": [
            "number",
            "string",
            "date"
          ]
        },
        "trait_type": {
          "$ref": "#/$defs/NonEmptyString",
          "description": "The name of the trait."
        },
        "value": {
          "type": [
            "string",
            "number"
          ]
        }
      },
      "additionalProperties": true
    },
    "MediaAudio": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/EncryptableUri"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "audio/wav",
            "audio/vnd.wave",
            "audio/mpeg",
            "audio/ogg",
            "audio/mp4",
            "audio/aac",
            "audio/webm",
            "audio/flac"
          ],
          "description": "The mime type of the audio file."
        },
        "cover": {
          "$ref": "#/$defs/EncryptableUri"
        },
        "duration": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "How long the the audio is in seconds."
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the audio."
        },
        "credits": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The credits for the audio."
        },
        "artist": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The name of the artist."
        },
        "genre": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The genre of the audio"
        },
        "recordLabel": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The record label for the audio."
        },
        "kind": {
          "type": "string",
          "enum": [
            "MUSIC",
            "PODCAST",
            "AUDIOBOOK",
            "VOICE_NOTE",
            "SOUND",
            "OTHER"
          ],
          "description": "The type of audio."
        },
        "lyrics": {
          "$ref": "#/$defs/EncryptableUri"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MediaImage": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/EncryptableUri"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "image/bmp",
            "image/gif",
            "image/heic",
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-ms-bmp"
          ],
          "description": "The mime type of the image"
        },
        "altTag": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The alt tag for accessibility"
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the image"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MediaVideo": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/EncryptableUri"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "model/gltf+json",
            "model/gltf-binary",
            "video/x-m4v",
            "video/mov",
            "video/mp4",
            "video/mpeg",
            "video/ogg",
            "video/ogv",
            "video/quicktime",
            "video/webm"
          ],
          "description": "The mime type of the video"
        },
        "altTag": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The alt tag for accessibility"
        },
        "cover": {
          "$ref": "#/$defs/EncryptableUri"
        },
        "duration": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "How long the the video is in seconds"
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the video"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MetadataAttribute": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Boolean"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "description": "A JS boolean value serialized as string. It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Date"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO 8601 date string.  It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Number"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "A valid JS number serialized as string. It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "String"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "Any string value."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "JSON"
            },
            "key": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "The attribute's unique identifier."
            },
            "value": {
              "$ref": "#/$defs/NonEmptyString",
              "description": "A JSON string. It's consumer responsibility to validate and parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        }
      ]
    },
    "MetadataLicenseType": {
      "type": "string",
      "enum": [
        "CCO",
        "CC BY",
        "CC BY-ND",
        "CC BY-NC",
        "TBNL-C-D-PL-Legal",
        "TBNL-C-DT-PL-Legal",
        "TBNL-C-ND-PL-Legal",
        "TBNL-C-D-NPL-Legal",
        "TBNL-C-DT-NPL-Legal",
        "TBNL-C-DTSA-PL-Legal",
        "TBNL-C-DTSA-NPL-Legal",
        "TBNL-C-ND-NPL-Legal",
        "TBNL-C-D-PL-Ledger",
        "TBNL-C-DT-PL-Ledger",
        "TBNL-C-ND-PL-Ledger",
        "TBNL-C-D-NPL-Ledger",
        "TBNL-C-DT-NPL-Ledger",
        "TBNL-C-DTSA-PL-Ledger",
        "TBNL-C-DTSA-NPL-Ledger",
        "TBNL-C-ND-NPL-Ledger",
        "TBNL-NC-D-PL-Legal",
        "TBNL-NC-DT-PL-Legal",
        "TBNL-NC-ND-PL-Legal",
        "TBNL-NC-D-NPL-Legal",
        "TBNL-NC-DT-NPL-Legal",
        "TBNL-NC-DTSA-PL-Legal",
        "TBNL-NC-DTSA-NPL-Legal",
        "TBNL-NC-ND-NPL-Legal",
        "TBNL-NC-D-PL-Ledger",
        "TBNL-NC-DT-PL-Ledger",
        "TBNL-NC-ND-PL-Ledger",
        "TBNL-NC-D-NPL-Ledger",
        "TBNL-NC-DT-NPL-Ledger",
        "TBNL-NC-DTSA-PL-Ledger",
        "TBNL-NC-DTSA-NPL-Ledger",
        "TBNL-NC-ND-NPL-Ledger"
      ]
    },
    "NetworkAddress": {
      "type": "object",
      "properties": {
        "chainId": {
          "$ref": "#/$defs/ChainId"
        },
        "address": {
          "$ref": "#/$defs/EvmAddress"
        }
      },
      "required": [
        "chainId",
        "address"
      ],
      "additionalProperties": false,
      "description": "An EVM compatible address on a specific chain."
    },
    "NftOwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "NFT_OWNERSHIP"
        },
        "contract": {
          "$ref": "#/$defs/NetworkAddress"
        },
        "contractType": {
          "type": "string",
          "enum": [
            "ERC721",
            "ERC1155"
          ]
        },
        "tokenIds": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "minItems": 1,
          "description": "A list of token IDs you want to check ownership of. The list is optional for ERC721, you MUST provide a list of token IDs for ERC1155."
        }
      },
      "required": [
        "type",
        "contract",
        "contractType"
      ],
      "additionalProperties": false
    },
    "PhysicalAddress": {
      "type": "object",
      "properties": {
        "formatted": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The full mailing address formatted for display."
        },
        "streetAddress": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The street address including house number, street name, P.O. Box, apartment or unit number and extended multi-line address information."
        },
        "locality": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The city or locality."
        },
        "region": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The state or region."
        },
        "postalCode": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The zip or postal code."
        },
        "country": {
          "$ref": "#/$defs/EncryptableString",
          "description": "The country name component."
        }
      },
      "required": [
        "locality",
        "country"
      ],
      "additionalProperties": false
    },
    "ProfileId": {
      "type": "string",
      "minLength": 4
    },
    "ProfileOwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PROFILE_OWNERSHIP"
        },
        "profileId": {
          "$ref": "#/$defs/ProfileId"
        }
      },
      "required": [
        "type",
        "profileId"
      ],
      "additionalProperties": false
    },
    "PublicationEncryptionStrategy": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "const": "LIT_PROTOCOL"
            },
            "encryptionKey": {
              "type": "string",
              "minLength": 368,
              "maxLength": 368,
              "description": "A symmetric encryption key."
            },
            "accessCondition": {
              "$ref": "#/$defs/AccessCondition"
            },
            "encryptedPaths": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/NonEmptyString"
              },
              "minItems": 1,
              "description": "An encrypted path is a string of keys separated by . that describe a path to a value in a JSON object (e.g. lens.attachments.0.item.url, lens.content)."
            }
          },
          "required": [
            "provider",
            "encryptionKey",
            "accessCondition",
            "encryptedPaths"
          ],
          "additionalProperties": false,
          "description": "Publication encryption strategy powered by the LIT Protocol."
        }
      ]
    },
    "PublicationId": {
      "type": "string",
      "minLength": 9
    },
    "Tag": {
      "type": "string",
      "minLength": 1,
      "maxLength": 50,
      "description": "An arbitrary tag."
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}
