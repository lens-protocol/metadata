{
  "type": "object",
  "properties": {
    "description": {
      "$ref": "#/$defs/Markdown",
      "description": "A human-readable description of the item. It could be plain text or markdown."
    },
    "external_url": {
      "type": "string",
      "minLength": 6,
      "format": "uri",
      "description": "This is the URL that will appear below the asset's image on OpenSea and others etc. and will allow users to leave OpenSea and view the item on the site."
    },
    "name": {
      "type": "string",
      "minLength": 1,
      "description": "Name of the NFT item."
    },
    "attributes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/MarketplaceMetadataAttribute"
      },
      "description": "These are the attributes for the item, which will show up on the OpenSea and others NFT trading websites on the item."
    },
    "image": {
      "type": "string",
      "minLength": 6,
      "format": "uri",
      "description": "Marketplaces will store any NFT image here."
    },
    "animation_url": {
      "type": "string",
      "minLength": 6,
      "format": "uri",
      "description": "A URL to a multi-media attachment for the item. The file extensions GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG are supported, along with the audio-only extensions MP3, WAV, and OGA. Animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are now supported. However, access to browser extensions is not supported."
    },
    "signature": {
      "type": "string",
      "minLength": 1,
      "description": "A cryptographic signature of the Lens metadata."
    },
    "$schema": {
      "type": "string",
      "const": "https://json-schemas.lens.dev/publications/event/3.0.0.json"
    },
    "lens": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "A unique identifier that in storages like IPFS ensures the uniqueness of the metadata URI. Use a UUID if unsure."
        },
        "appId": {
          "type": "string",
          "minLength": 1,
          "maxLength": 200,
          "description": "The App Id that this publication belongs to."
        },
        "hideFromFeed": {
          "type": "boolean",
          "description": "Determine if the publication should not be shown in any feed."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "maxItems": 20,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard. Over time, common attributes will be added to the standard and their usage as arbitrary attributes will be discouraged."
        },
        "locale": {
          "type": "string",
          "minLength": 2,
          "maxLength": 5,
          "description": "A locale identifier."
        },
        "encryptedWith": {
          "$ref": "#/$defs/PublicationEncryptionStrategy"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Tag"
          },
          "maxItems": 20,
          "description": "An arbitrary list of tags."
        },
        "contentWarning": {
          "type": "string",
          "enum": [
            "NSFW",
            "SENSITIVE",
            "SPOILER"
          ],
          "description": "Specify a content warning."
        },
        "mainContentFocus": {
          "type": "string",
          "const": "EVENT",
          "description": "The main focus of the publication."
        },
        "location": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 6,
                  "format": "uri",
                  "description": "A virtual location."
                },
                {
                  "$ref": "#/$defs/EncryptedString"
                }
              ]
            },
            {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1,
                  "description": "The event location (free form text)."
                },
                {
                  "$ref": "#/$defs/EncryptedString"
                }
              ]
            }
          ],
          "description": "The location of the event."
        },
        "position": {
          "anyOf": [
            {
              "$ref": "#/$defs/GeoURI",
              "description": "The geographic position of the event."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "address": {
          "$ref": "#/$defs/PhysicalAddress",
          "description": "The address of the event."
        },
        "startsAt": {
          "anyOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "The event start time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`)."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "endsAt": {
          "anyOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "The event end time (ISO 8601 `YYYY-MM-DDTHH:mm:ss.sssZ`)."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "schedulingAdjustments": {
          "type": "object",
          "properties": {
            "timezoneId": {
              "type": "string",
              "enum": [
                "Africa/Abidjan",
                "Africa/Accra",
                "Africa/Addis_Ababa",
                "Africa/Algiers",
                "Africa/Asmera",
                "Africa/Bamako",
                "Africa/Bangui",
                "Africa/Banjul",
                "Africa/Bissau",
                "Africa/Blantyre",
                "Africa/Brazzaville",
                "Africa/Bujumbura",
                "Africa/Cairo",
                "Africa/Casablanca",
                "Africa/Ceuta",
                "Africa/Conakry",
                "Africa/Dakar",
                "Africa/Dar_es_Salaam",
                "Africa/Djibouti",
                "Africa/Douala",
                "Africa/El_Aaiun",
                "Africa/Freetown",
                "Africa/Gaborone",
                "Africa/Harare",
                "Africa/Johannesburg",
                "Africa/Juba",
                "Africa/Kampala",
                "Africa/Khartoum",
                "Africa/Kigali",
                "Africa/Kinshasa",
                "Africa/Lagos",
                "Africa/Libreville",
                "Africa/Lome",
                "Africa/Luanda",
                "Africa/Lubumbashi",
                "Africa/Lusaka",
                "Africa/Malabo",
                "Africa/Maputo",
                "Africa/Maseru",
                "Africa/Mbabane",
                "Africa/Mogadishu",
                "Africa/Monrovia",
                "Africa/Nairobi",
                "Africa/Ndjamena",
                "Africa/Niamey",
                "Africa/Nouakchott",
                "Africa/Ouagadougou",
                "Africa/Porto-Novo",
                "Africa/Sao_Tome",
                "Africa/Tripoli",
                "Africa/Tunis",
                "Africa/Windhoek",
                "America/Adak",
                "America/Anchorage",
                "America/Anguilla",
                "America/Antigua",
                "America/Araguaina",
                "America/Argentina/La_Rioja",
                "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta",
                "America/Argentina/San_Juan",
                "America/Argentina/San_Luis",
                "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia",
                "America/Aruba",
                "America/Asuncion",
                "America/Bahia",
                "America/Bahia_Banderas",
                "America/Barbados",
                "America/Belem",
                "America/Belize",
                "America/Blanc-Sablon",
                "America/Boa_Vista",
                "America/Bogota",
                "America/Boise",
                "America/Buenos_Aires",
                "America/Cambridge_Bay",
                "America/Campo_Grande",
                "America/Cancun",
                "America/Caracas",
                "America/Catamarca",
                "America/Cayenne",
                "America/Cayman",
                "America/Chicago",
                "America/Chihuahua",
                "America/Ciudad_Juarez",
                "America/Coral_Harbour",
                "America/Cordoba",
                "America/Costa_Rica",
                "America/Creston",
                "America/Cuiaba",
                "America/Curacao",
                "America/Danmarkshavn",
                "America/Dawson",
                "America/Dawson_Creek",
                "America/Denver",
                "America/Detroit",
                "America/Dominica",
                "America/Edmonton",
                "America/Eirunepe",
                "America/El_Salvador",
                "America/Fort_Nelson",
                "America/Fortaleza",
                "America/Glace_Bay",
                "America/Godthab",
                "America/Goose_Bay",
                "America/Grand_Turk",
                "America/Grenada",
                "America/Guadeloupe",
                "America/Guatemala",
                "America/Guayaquil",
                "America/Guyana",
                "America/Halifax",
                "America/Havana",
                "America/Hermosillo",
                "America/Indiana/Knox",
                "America/Indiana/Marengo",
                "America/Indiana/Petersburg",
                "America/Indiana/Tell_City",
                "America/Indiana/Vevay",
                "America/Indiana/Vincennes",
                "America/Indiana/Winamac",
                "America/Indianapolis",
                "America/Inuvik",
                "America/Iqaluit",
                "America/Jamaica",
                "America/Jujuy",
                "America/Juneau",
                "America/Kentucky/Monticello",
                "America/Kralendijk",
                "America/La_Paz",
                "America/Lima",
                "America/Los_Angeles",
                "America/Louisville",
                "America/Lower_Princes",
                "America/Maceio",
                "America/Managua",
                "America/Manaus",
                "America/Marigot",
                "America/Martinique",
                "America/Matamoros",
                "America/Mazatlan",
                "America/Mendoza",
                "America/Menominee",
                "America/Merida",
                "America/Metlakatla",
                "America/Mexico_City",
                "America/Miquelon",
                "America/Moncton",
                "America/Monterrey",
                "America/Montevideo",
                "America/Montserrat",
                "America/Nassau",
                "America/New_York",
                "America/Nipigon",
                "America/Nome",
                "America/Noronha",
                "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem",
                "America/Ojinaga",
                "America/Panama",
                "America/Pangnirtung",
                "America/Paramaribo",
                "America/Phoenix",
                "America/Port-au-Prince",
                "America/Port_of_Spain",
                "America/Porto_Velho",
                "America/Puerto_Rico",
                "America/Punta_Arenas",
                "America/Rainy_River",
                "America/Rankin_Inlet",
                "America/Recife",
                "America/Regina",
                "America/Resolute",
                "America/Rio_Branco",
                "America/Santa_Isabel",
                "America/Santarem",
                "America/Santiago",
                "America/Santo_Domingo",
                "America/Sao_Paulo",
                "America/Scoresbysund",
                "America/Sitka",
                "America/St_Barthelemy",
                "America/St_Johns",
                "America/St_Kitts",
                "America/St_Lucia",
                "America/St_Thomas",
                "America/St_Vincent",
                "America/Swift_Current",
                "America/Tegucigalpa",
                "America/Thule",
                "America/Thunder_Bay",
                "America/Tijuana",
                "America/Toronto",
                "America/Tortola",
                "America/Vancouver",
                "America/Whitehorse",
                "America/Winnipeg",
                "America/Yakutat",
                "America/Yellowknife",
                "Antarctica/Casey",
                "Antarctica/Davis",
                "Antarctica/DumontDUrville",
                "Antarctica/Macquarie",
                "Antarctica/Mawson",
                "Antarctica/McMurdo",
                "Antarctica/Palmer",
                "Antarctica/Rothera",
                "Antarctica/Syowa",
                "Antarctica/Troll",
                "Antarctica/Vostok",
                "Arctic/Longyearbyen",
                "Asia/Aden",
                "Asia/Almaty",
                "Asia/Amman",
                "Asia/Anadyr",
                "Asia/Aqtau",
                "Asia/Aqtobe",
                "Asia/Ashgabat",
                "Asia/Atyrau",
                "Asia/Baghdad",
                "Asia/Bahrain",
                "Asia/Baku",
                "Asia/Bangkok",
                "Asia/Barnaul",
                "Asia/Beirut",
                "Asia/Bishkek",
                "Asia/Brunei",
                "Asia/Calcutta",
                "Asia/Chita",
                "Asia/Choibalsan",
                "Asia/Colombo",
                "Asia/Damascus",
                "Asia/Dhaka",
                "Asia/Dili",
                "Asia/Dubai",
                "Asia/Dushanbe",
                "Asia/Famagusta",
                "Asia/Gaza",
                "Asia/Hebron",
                "Asia/Hong_Kong",
                "Asia/Hovd",
                "Asia/Irkutsk",
                "Asia/Jakarta",
                "Asia/Jayapura",
                "Asia/Jerusalem",
                "Asia/Kabul",
                "Asia/Kamchatka",
                "Asia/Karachi",
                "Asia/Katmandu",
                "Asia/Khandyga",
                "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur",
                "Asia/Kuching",
                "Asia/Kuwait",
                "Asia/Macau",
                "Asia/Magadan",
                "Asia/Makassar",
                "Asia/Manila",
                "Asia/Muscat",
                "Asia/Nicosia",
                "Asia/Novokuznetsk",
                "Asia/Novosibirsk",
                "Asia/Omsk",
                "Asia/Oral",
                "Asia/Phnom_Penh",
                "Asia/Pontianak",
                "Asia/Pyongyang",
                "Asia/Qatar",
                "Asia/Qostanay",
                "Asia/Qyzylorda",
                "Asia/Rangoon",
                "Asia/Riyadh",
                "Asia/Saigon",
                "Asia/Sakhalin",
                "Asia/Samarkand",
                "Asia/Seoul",
                "Asia/Shanghai",
                "Asia/Singapore",
                "Asia/Srednekolymsk",
                "Asia/Taipei",
                "Asia/Tashkent",
                "Asia/Tbilisi",
                "Asia/Tehran",
                "Asia/Thimphu",
                "Asia/Tokyo",
                "Asia/Tomsk",
                "Asia/Ulaanbaatar",
                "Asia/Urumqi",
                "Asia/Ust-Nera",
                "Asia/Vientiane",
                "Asia/Vladivostok",
                "Asia/Yakutsk",
                "Asia/Yekaterinburg",
                "Asia/Yerevan",
                "Atlantic/Azores",
                "Atlantic/Bermuda",
                "Atlantic/Canary",
                "Atlantic/Cape_Verde",
                "Atlantic/Faeroe",
                "Atlantic/Madeira",
                "Atlantic/Reykjavik",
                "Atlantic/South_Georgia",
                "Atlantic/St_Helena",
                "Atlantic/Stanley",
                "Australia/Adelaide",
                "Australia/Brisbane",
                "Australia/Broken_Hill",
                "Australia/Currie",
                "Australia/Darwin",
                "Australia/Eucla",
                "Australia/Hobart",
                "Australia/Lindeman",
                "Australia/Lord_Howe",
                "Australia/Melbourne",
                "Australia/Perth",
                "Australia/Sydney",
                "Europe/Amsterdam",
                "Europe/Andorra",
                "Europe/Astrakhan",
                "Europe/Athens",
                "Europe/Belgrade",
                "Europe/Berlin",
                "Europe/Bratislava",
                "Europe/Brussels",
                "Europe/Bucharest",
                "Europe/Budapest",
                "Europe/Busingen",
                "Europe/Chisinau",
                "Europe/Copenhagen",
                "Europe/Dublin",
                "Europe/Gibraltar",
                "Europe/Guernsey",
                "Europe/Helsinki",
                "Europe/Isle_of_Man",
                "Europe/Istanbul",
                "Europe/Jersey",
                "Europe/Kaliningrad",
                "Europe/Kiev",
                "Europe/Kirov",
                "Europe/Lisbon",
                "Europe/Ljubljana",
                "Europe/London",
                "Europe/Luxembourg",
                "Europe/Madrid",
                "Europe/Malta",
                "Europe/Mariehamn",
                "Europe/Minsk",
                "Europe/Monaco",
                "Europe/Moscow",
                "Europe/Oslo",
                "Europe/Paris",
                "Europe/Podgorica",
                "Europe/Prague",
                "Europe/Riga",
                "Europe/Rome",
                "Europe/Samara",
                "Europe/San_Marino",
                "Europe/Sarajevo",
                "Europe/Saratov",
                "Europe/Simferopol",
                "Europe/Skopje",
                "Europe/Sofia",
                "Europe/Stockholm",
                "Europe/Tallinn",
                "Europe/Tirane",
                "Europe/Ulyanovsk",
                "Europe/Uzhgorod",
                "Europe/Vaduz",
                "Europe/Vatican",
                "Europe/Vienna",
                "Europe/Vilnius",
                "Europe/Volgograd",
                "Europe/Warsaw",
                "Europe/Zagreb",
                "Europe/Zaporozhye",
                "Europe/Zurich",
                "Indian/Antananarivo",
                "Indian/Chagos",
                "Indian/Christmas",
                "Indian/Cocos",
                "Indian/Comoro",
                "Indian/Kerguelen",
                "Indian/Mahe",
                "Indian/Maldives",
                "Indian/Mauritius",
                "Indian/Mayotte",
                "Indian/Reunion",
                "Pacific/Apia",
                "Pacific/Auckland",
                "Pacific/Bougainville",
                "Pacific/Chatham",
                "Pacific/Easter",
                "Pacific/Efate",
                "Pacific/Enderbury",
                "Pacific/Fakaofo",
                "Pacific/Fiji",
                "Pacific/Funafuti",
                "Pacific/Galapagos",
                "Pacific/Gambier",
                "Pacific/Guadalcanal",
                "Pacific/Guam",
                "Pacific/Honolulu",
                "Pacific/Johnston",
                "Pacific/Kiritimati",
                "Pacific/Kosrae",
                "Pacific/Kwajalein",
                "Pacific/Majuro",
                "Pacific/Marquesas",
                "Pacific/Midway",
                "Pacific/Nauru",
                "Pacific/Niue",
                "Pacific/Norfolk",
                "Pacific/Noumea",
                "Pacific/Pago_Pago",
                "Pacific/Palau",
                "Pacific/Pitcairn",
                "Pacific/Ponape",
                "Pacific/Port_Moresby",
                "Pacific/Rarotonga",
                "Pacific/Saipan",
                "Pacific/Tahiti",
                "Pacific/Tarawa",
                "Pacific/Tongatapu",
                "Pacific/Truk",
                "Pacific/Wake",
                "Pacific/Wallis"
              ],
              "description": "Indicates a reference timezone for the event start and end times. If physical event, you could use the timezone of the event location. If virtual event, the timezone of the event organizer."
            },
            "timezoneOffset": {
              "type": "number",
              "description": "Indicates the reference timezone offset with respect to UTC timezone a the time of event creation. The difference in minutes between the reference timezone time and UTC time (e.g. UTC+2 would be -120, UTC-5 would be 300, UTC would be 0)."
            }
          },
          "required": [
            "timezoneId",
            "timezoneOffset"
          ],
          "additionalProperties": false,
          "description": "Captures extra criteria to recompute correctly future start and end times.See: https://www.w3.org/International/wiki/WorkingWithTimeZones#Working_with_Future_and_Recurring_Events"
        },
        "links": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 6,
                "format": "uri",
                "description": "A Uniform Resource Identifier. "
              },
              {
                "$ref": "#/$defs/EncryptedString"
              }
            ]
          },
          "minItems": 1,
          "description": "The links you want to include with it."
        },
        "content": {
          "anyOf": [
            {
              "$ref": "#/$defs/Markdown",
              "description": "Optional markdown content."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AnyMedia"
          },
          "minItems": 1,
          "description": "The other attachments you want to include with it."
        }
      },
      "required": [
        "id",
        "locale",
        "mainContentFocus",
        "location",
        "startsAt",
        "endsAt"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "$schema",
    "lens"
  ],
  "additionalProperties": false,
  "$defs": {
    "AdvancedContractCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ADVANCED_CONTRACT"
        },
        "contract": {
          "type": "object",
          "properties": {
            "chainId": {
              "type": "number",
              "exclusiveMinimum": 0
            },
            "address": {
              "$ref": "#/$defs/EvmAddress"
            }
          },
          "required": [
            "chainId",
            "address"
          ],
          "additionalProperties": false,
          "description": "The contract address and chain id"
        },
        "functionName": {
          "type": "string",
          "minLength": 1,
          "description": "The name of the function you want to call"
        },
        "abi": {
          "type": "string",
          "minLength": 1,
          "description": "The contract ABI. Has to be in human readable single string format containing the signature of the function you want to call. See https://docs.ethers.org/v5/api/utils/abi/fragments/#human-readable-abi for more info"
        },
        "params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The parameters to pass to the function. Must be exactly matching the function arguments. You *must* pass in the `:userAddress` parameter to represent the decrypter address. Any array or tuple arguments, must be stringified JSON arrays."
        },
        "comparison": {
          "type": "string",
          "enum": [
            "EQUAL",
            "NOT_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL"
          ],
          "description": "The comparison operator to use. In case of boolean functions you can only use EQUAL or NOT_EQUAL"
        },
        "value": {
          "type": "string",
          "pattern": "^(true|false|\\d{1,70})$",
          "description": "The comparison value. Accepts 'true', 'false' or a number"
        }
      },
      "required": [
        "type",
        "contract",
        "functionName",
        "abi",
        "params",
        "comparison",
        "value"
      ],
      "additionalProperties": false
    },
    "AccessCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "OR"
        },
        "criteria": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "AND"
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/$defs/NftOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/Erc20OwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/EoaOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/ProfileOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/FollowCondition"
                        },
                        {
                          "$ref": "#/$defs/CollectCondition"
                        },
                        {
                          "$ref": "#/$defs/AdvancedContractCondition"
                        }
                      ]
                    },
                    "maxItems": 5
                  }
                },
                "required": [
                  "type",
                  "criteria"
                ],
                "additionalProperties": false
              },
              {
                "$ref": "#/$defs/CollectCondition"
              },
              {
                "$ref": "#/$defs/AdvancedContractCondition"
              },
              {
                "$ref": "#/$defs/EoaOwnershipCondition"
              },
              {
                "$ref": "#/$defs/Erc20OwnershipCondition"
              },
              {
                "$ref": "#/$defs/FollowCondition"
              },
              {
                "$ref": "#/$defs/NftOwnershipCondition"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "OR"
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/$defs/NftOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/Erc20OwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/EoaOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/ProfileOwnershipCondition"
                        },
                        {
                          "$ref": "#/$defs/FollowCondition"
                        },
                        {
                          "$ref": "#/$defs/CollectCondition"
                        },
                        {
                          "$ref": "#/$defs/AdvancedContractCondition"
                        }
                      ]
                    },
                    "maxItems": 5
                  }
                },
                "required": [
                  "type",
                  "criteria"
                ],
                "additionalProperties": false
              },
              {
                "$ref": "#/$defs/ProfileOwnershipCondition"
              }
            ]
          },
          "maxItems": 5
        }
      },
      "required": [
        "type",
        "criteria"
      ],
      "additionalProperties": false
    },
    "PhysicalAddress": {
      "type": "object",
      "properties": {
        "formatted": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The full mailing address formatted for display."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "streetAddress": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The street address including house number, street name, P.O. Box, apartment or unit number and extended multi-line address information."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "locality": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The city or locality."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "region": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The state or region."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "postalCode": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The zip or postal code."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "country": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The country name component."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        }
      },
      "required": [
        "locality",
        "country"
      ],
      "additionalProperties": false
    },
    "Amount": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "object",
          "properties": {
            "contract": {
              "$ref": "#/$defs/NetworkAddress"
            },
            "decimals": {
              "type": "integer",
              "minimum": 0,
              "description": "The number of decimals of the asset."
            }
          },
          "required": [
            "contract",
            "decimals"
          ],
          "additionalProperties": false
        },
        "value": {
          "type": "string",
          "minLength": 1,
          "description": "The amount in the smallest unit of the given asset (e.g. wei for ETH)."
        }
      },
      "required": [
        "asset",
        "value"
      ],
      "additionalProperties": false,
      "description": "An amount of a specific asset."
    },
    "AnyMedia": {
      "anyOf": [
        {
          "$ref": "#/$defs/MediaAudio"
        },
        {
          "$ref": "#/$defs/MediaImage"
        },
        {
          "$ref": "#/$defs/MediaVideo"
        }
      ]
    },
    "CollectCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "COLLECT"
        },
        "publicationId": {
          "$ref": "#/$defs/PublicationId"
        },
        "thisPublication": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "type",
        "publicationId"
      ],
      "additionalProperties": false
    },
    "EncryptedString": {
      "type": "string",
      "minLength": 1,
      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
      "description": "An encrypted value."
    },
    "EoaOwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "EOA_OWNERSHIP"
        },
        "address": {
          "$ref": "#/$defs/EvmAddress"
        }
      },
      "required": [
        "type",
        "address"
      ],
      "additionalProperties": false
    },
    "Erc20OwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "ERC20_OWNERSHIP"
        },
        "amount": {
          "$ref": "#/$defs/Amount"
        },
        "condition": {
          "type": "string",
          "enum": [
            "EQUAL",
            "NOT_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL"
          ]
        }
      },
      "required": [
        "type",
        "amount",
        "condition"
      ],
      "additionalProperties": false
    },
    "EvmAddress": {
      "type": "string",
      "minLength": 1,
      "description": "An EVM compatible address."
    },
    "FollowCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "FOLLOW"
        },
        "follow": {
          "$ref": "#/$defs/ProfileId"
        }
      },
      "required": [
        "type",
        "follow"
      ],
      "additionalProperties": false
    },
    "GeoURI": {
      "type": "string",
      "minLength": 1,
      "pattern": "^geo:(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$",
      "description": "A Geographic coordinate as subset of Geo URI (RFC 5870). Currently only supports the `geo:lat,lng` format."
    },
    "Markdown": {
      "type": "string",
      "minLength": 1,
      "description": "A markdown text."
    },
    "MarketplaceMetadataAttribute": {
      "type": "object",
      "properties": {
        "display_type": {
          "type": "string",
          "enum": [
            "number",
            "string",
            "date"
          ]
        },
        "trait_type": {
          "type": "string",
          "minLength": 1,
          "description": "The name of the trait."
        },
        "value": {
          "type": "string",
          "minLength": 1,
          "description": "The value of the trait"
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "MediaAudio": {
      "type": "object",
      "properties": {
        "item": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 6,
              "format": "uri",
              "description": "The location of the file."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MetadataAttribute"
          },
          "minItems": 1,
          "description": "A bag of attributes that can be used to store any kind of metadata that is not currently supported by the standard."
        },
        "type": {
          "type": "string",
          "enum": [
            "audio/wav",
            "audio/vnd.wave",
            "audio/mpeg",
            "audio/ogg",
            "audio/mp4",
            "audio/aac",
            "audio/webm",
            "audio/flac"
          ],
          "description": "The mime type of the audio file."
        },
        "cover": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 6,
              "format": "uri",
              "description": "The cover image for the audio."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "duration": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "How long the the audio is in seconds."
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the audio."
        },
        "credits": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The credits for the audio."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "artist": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The name of the artist."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "genre": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The genre of the audio"
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "recordLabel": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The record label for the audio."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "kind": {
          "type": "string",
          "enum": [
            "MUSIC",
            "PODCAST",
            "AUDIOBOOK",
            "VOICE_NOTE",
            "SOUND",
            "OTHER"
          ],
          "description": "The type of audio."
        },
        "lyrics": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 6,
              "format": "uri",
              "description": "The lyrics for the audio."
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MediaImage": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/MediaAudio/properties/item"
        },
        "attributes": {
          "$ref": "#/$defs/MediaAudio/properties/attributes"
        },
        "type": {
          "type": "string",
          "enum": [
            "image/bmp",
            "image/gif",
            "image/heic",
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-ms-bmp"
          ],
          "description": "The mime type of the image"
        },
        "altTag": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The alt tag for accessibility"
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the image"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MediaVideo": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/$defs/MediaAudio/properties/item"
        },
        "attributes": {
          "$ref": "#/$defs/MediaAudio/properties/attributes"
        },
        "type": {
          "type": "string",
          "enum": [
            "model/gltf+json",
            "model/gltf-binary",
            "video/x-m4v",
            "video/mov",
            "video/mp4",
            "video/mpeg",
            "video/ogg",
            "video/ogv",
            "video/quicktime",
            "video/webm"
          ],
          "description": "The mime type of the video"
        },
        "altTag": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 1,
              "description": "The alt tag for accessibility"
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "cover": {
          "anyOf": [
            {
              "type": "string",
              "minLength": 6,
              "format": "uri",
              "description": "The cover image for the video"
            },
            {
              "$ref": "#/$defs/EncryptedString"
            }
          ]
        },
        "duration": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "How long the the video is in seconds"
        },
        "license": {
          "$ref": "#/$defs/MetadataLicenseType",
          "description": "The license for the video"
        }
      },
      "required": [
        "item",
        "type"
      ],
      "additionalProperties": false
    },
    "MetadataAttribute": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Boolean"
            },
            "key": {
              "type": "string",
              "minLength": 1,
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "description": "A JS boolean value serialized as string. It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Date"
            },
            "key": {
              "type": "string",
              "minLength": 1,
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "description": "A valid ISO 8601 date string.  It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "Number"
            },
            "key": {
              "type": "string",
              "minLength": 1,
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "minLength": 1,
              "description": "A valid JS number serialized as string. It's consumer responsibility to parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "String"
            },
            "key": {
              "type": "string",
              "minLength": 1,
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "minLength": 1,
              "description": "A string value."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "JSON"
            },
            "key": {
              "type": "string",
              "minLength": 1,
              "description": "The attribute's unique identifier."
            },
            "value": {
              "type": "string",
              "minLength": 1,
              "description": "A JSON string. It's consumer responsibility to validate and parse it."
            }
          },
          "required": [
            "type",
            "key",
            "value"
          ],
          "additionalProperties": false
        }
      ]
    },
    "MetadataLicenseType": {
      "type": "string",
      "enum": [
        "CCO",
        "CC BY",
        "CC BY-ND",
        "CC BY-NC",
        "TBNL-C-D-PL-Legal",
        "TBNL-C-DT-PL-Legal",
        "TBNL-C-ND-PL-Legal",
        "TBNL-C-D-NPL-Legal",
        "TBNL-C-DT-NPL-Legal",
        "TBNL-C-DTSA-PL-Legal",
        "TBNL-C-DTSA-NPL-Legal",
        "TBNL-C-ND-NPL-Legal",
        "TBNL-C-D-PL-Ledger",
        "TBNL-C-DT-PL-Ledger",
        "TBNL-C-ND-PL-Ledger",
        "TBNL-C-D-NPL-Ledger",
        "TBNL-C-DT-NPL-Ledger",
        "TBNL-C-DTSA-PL-Ledger",
        "TBNL-C-DTSA-NPL-Ledger",
        "TBNL-C-ND-NPL-Ledger",
        "TBNL-NC-D-PL-Legal",
        "TBNL-NC-DT-PL-Legal",
        "TBNL-NC-ND-PL-Legal",
        "TBNL-NC-D-NPL-Legal",
        "TBNL-NC-DT-NPL-Legal",
        "TBNL-NC-DTSA-PL-Legal",
        "TBNL-NC-DTSA-NPL-Legal",
        "TBNL-NC-ND-NPL-Legal",
        "TBNL-NC-D-PL-Ledger",
        "TBNL-NC-DT-PL-Ledger",
        "TBNL-NC-ND-PL-Ledger",
        "TBNL-NC-D-NPL-Ledger",
        "TBNL-NC-DT-NPL-Ledger",
        "TBNL-NC-DTSA-PL-Ledger",
        "TBNL-NC-DTSA-NPL-Ledger",
        "TBNL-NC-ND-NPL-Ledger"
      ]
    },
    "NetworkAddress": {
      "type": "object",
      "properties": {
        "chainId": {
          "$ref": "#/$defs/AdvancedContractCondition/properties/contract/properties/chainId"
        },
        "address": {
          "$ref": "#/$defs/EvmAddress"
        }
      },
      "required": [
        "chainId",
        "address"
      ],
      "additionalProperties": false,
      "description": "An EVM compatible address on a specific chain."
    },
    "NftOwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "NFT_OWNERSHIP"
        },
        "contract": {
          "$ref": "#/$defs/NetworkAddress"
        },
        "contractType": {
          "type": "string",
          "enum": [
            "ERC721",
            "ERC1155"
          ]
        },
        "tokenIds": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "minItems": 1,
          "description": "A list of token IDs you want to check ownership of. The list is optional for ERC721, you MUST provide a list of token IDs for ERC1155."
        }
      },
      "required": [
        "type",
        "contract",
        "contractType"
      ],
      "additionalProperties": false
    },
    "ProfileId": {
      "type": "string",
      "minLength": 1
    },
    "ProfileOwnershipCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "PROFILE_OWNERSHIP"
        },
        "profileId": {
          "$ref": "#/$defs/ProfileId"
        }
      },
      "required": [
        "type",
        "profileId"
      ],
      "additionalProperties": false
    },
    "PublicationEncryptionStrategy": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "const": "LIT_PROTOCOL"
            },
            "encryptionKey": {
              "type": "string",
              "minLength": 368,
              "maxLength": 368,
              "description": "A symmetric encryption key."
            },
            "accessCondition": {
              "$ref": "#/$defs/AccessCondition"
            },
            "encryptedPaths": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "description": "An encrypted path is a string of keys separated by . that describe a path to a value in a JSON object (e.g. lens.attachments.0.item.url, lens.content)."
              },
              "minItems": 1,
              "description": "An encrypted path is a string of keys separated by . that describe a path to a value in a JSON object (e.g. lens.attachments.0.item.url, lens.content)."
            }
          },
          "required": [
            "provider",
            "encryptionKey",
            "accessCondition",
            "encryptedPaths"
          ],
          "additionalProperties": false,
          "description": "Publication encryption strategy powered by the LIT Protocol."
        }
      ]
    },
    "PublicationId": {
      "type": "string",
      "minLength": 1
    },
    "Tag": {
      "type": "string",
      "minLength": 1,
      "maxLength": 50,
      "description": "An arbitrary tag."
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}
